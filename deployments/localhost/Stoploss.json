{
  "address": "0xC1dC7a8379885676a6Ea08E67b7Defd9a235De71",
  "abi": [
    {
      "inputs": [],
      "name": "ETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_auxData",
          "type": "bytes"
        }
      ],
      "name": "canExecute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_auxData",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "protectedFunds",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x448c5d54465b5dbdfbd7622ee9413cf2a3e394c781634a44a9358a377366d250",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xC1dC7a8379885676a6Ea08E67b7Defd9a235De71",
    "transactionIndex": 0,
    "gasUsed": "728041",
    "logsBloom": "0x
    "blockHash": "0xadd3c09f451b64c61fb78fedbb64f64c668d5be520288ae04bb598d9b6c2dbe4",
    "transactionHash": "0x448c5d54465b5dbdfbd7622ee9413cf2a3e394c781634a44a9358a377366d250",
    "logs": [],
    "blockNumber": 20599675,
    "cumulativeGasUsed": "728041",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f878322ecf227197a94ba528cfbbe037",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_auxData\",\"type\":\"bytes\"}],\"name\":\"canExecute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_auxData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protectedFunds\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{\"canExecute(address,uint256,bytes,bytes)\":{\"params\":{\"_auxData\":\"- Bytes of the auxiliar data used for the handlers to execute the order\",\"_data\":\"- Bytes of the order's data\",\"_inputAmount\":\"- uint256 of the input token amount (order amount)\",\"_inputToken\":\"- Address of the input token\"},\"returns\":{\"_0\":\"bool - whether the order can be executed or not\"}},\"execute(address,uint256,address,bytes,bytes)\":{\"params\":{\"_auxData\":\"- Bytes of the auxiliar data used for the handlers to execute the order\",\"_data\":\"- Bytes of the order's data\",\"_inputToken\":\"- Address of the input token\",\"_owner\":\"- Address of the order's owner\"},\"returns\":{\"protectedFunds\":\"- amount of output token in saved value\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canExecute(address,uint256,bytes,bytes)\":{\"notice\":\"Check whether an order can be executed or not\"},\"execute(address,uint256,address,bytes,bytes)\":{\"notice\":\"Executes an order\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Stoploss.sol\":\"Stoploss\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xeb7d3f994113b46ace024eb3ce653bc26f5650c384f7f4316d363255a99edd54\",\"license\":\"MIT\"},\"contracts/Interfaces/IHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IHandler {\\n    /// @notice receive ETH\\n    receive() external payable;\\n\\n    /**\\n     * @notice Handle an order execution\\n     * @param _inputToken - Address of the input token\\n     * @param _outputToken - Address of the output token\\n     * @param _inputAmount - uint256 of the input token amount\\n     * @param _minReturn - uint256 of the min return amount of output token\\n     * @param _data - Bytes of arbitrary data\\n     * @return bought - Amount of output token bought\\n     */\\n    function handle(\\n        IERC20 _inputToken,\\n        IERC20 _outputToken,\\n        uint256 _inputAmount,\\n        uint256 _minReturn,\\n        bytes calldata _data\\n    ) external payable returns (uint256 bought);\\n\\n    /**\\n     * @notice Check whether can handle an order execution\\n     * @param _inputToken - Address of the input token\\n     * @param _outputToken - Address of the output token\\n     * @param _inputAmount - uint256 of the input token amount\\n     * @param _minReturn - uint256 of the min return amount of output token\\n     * @param _data - Bytes of arbitrary data\\n     * @return bool - Whether the execution can be handled or not\\n     */\\n    function canHandle(\\n        IERC20 _inputToken,\\n        IERC20 _outputToken,\\n        uint256 _inputAmount,\\n        uint256 _minReturn,\\n        bytes calldata _data\\n    ) external view returns (bool);\\n\\n    function canHandleStoploss(\\n        IERC20 _inputToken,\\n        IERC20 _outputToken,\\n        uint256 _inputAmount,\\n        uint256 _stoploss,\\n        uint256 _slppage,\\n        bytes calldata _data\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x59bfb3416e0fb641c35f884206e4688ed6b7d0fc5500750571bae3fec2ec7fc0\",\"license\":\"MIT\"},\"contracts/Interfaces/IModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IModule {\\n    /// @notice receive ETH\\n    receive() external payable;\\n\\n    /**\\n     * @notice Executes an order\\n     * @param _inputToken - Address of the input token\\n     * @param _inputAmount - uint256 of the input token amount (order amount)\\n     * @param _owner - Address of the order's owner\\n     * @param _data - Bytes of the order's data\\n     * @param _auxData - Bytes of the auxiliar data used for the handlers to execute the order\\n     * @return bought - amount of output token bought\\n     */\\n    function execute(\\n        IERC20 _inputToken,\\n        uint256 _inputAmount,\\n        address payable _owner,\\n        bytes calldata _data,\\n        bytes calldata _auxData\\n    ) external returns (uint256 bought);\\n\\n    /**\\n     * @notice Check whether an order can be executed or not\\n     * @param _inputToken - Address of the input token\\n     * @param _inputAmount - uint256 of the input token amount (order amount)\\n     * @param _data - Bytes of the order's data\\n     * @param _auxData - Bytes of the auxiliar data used for the handlers to execute the order\\n     * @return bool - whether the order can be executed or not\\n     */\\n    function canExecute(\\n        IERC20 _inputToken,\\n        uint256 _inputAmount,\\n        bytes calldata _data,\\n        bytes calldata _auxData\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb2b350ef7d1b6d3085a1b2299f642310e5923cd66627728f503abd58094d3301\",\"license\":\"MIT\"},\"contracts/Stoploss.sol\":{\"content\":\"//\\n// Original work by Pine.Finance\\n//  - https://github.com/pine-finance\\n//\\n// Authors:\\n//  - Ignacio Mazzara <@nachomazzara>\\n//  - Agustin Aguilar <@agusx1211>\\n\\n//\\n//\\n//                                                /\\n//                                                @,\\n//                                               /&&\\n//                                              &&%%&/\\n//                                            &%%%%&%%,..\\n//                                         */%&,*&&&&&&%%&*\\n//                                           /&%%%%%%%#.\\n//                                    ./%&%%%&#/%%%%&#&%%%&#(*.\\n//                                         .%%%%%%%&&%&/ ..,...\\n//                                       .*,%%%%%%%%%&&%%%%(\\n//                                     ,&&%%%&&*%%%%%%%%.*(#%&/\\n//                                  ./,(*,*,#%%%%%%%%%%%%%%%(,\\n//                                 ,(%%%%%%%%%%%%&%%%%%%%%%#&&%%%#/(*\\n//                                     *#%%%%%%%&%%%&%%#%%%%%%(\\n//                              .(####%%&%&#*&%%##%%%%%%%%%%%#.,,\\n//                                      ,&%%%%%###%%%%%%%%%%%%#&&.\\n//                             ..,(&%%%%%%%%%%%%%%%%%%&&%%%%#%&&%&%%%%&&#,\\n//                           ,##//%((#*/#%%%%%%%%%%%%%%%%%%%%%&(.\\n//                                  (%%%%%%%%%%%%%%%%%%%#%%%%%%%%%&&&&#(*,\\n//                                   ./%%%%&%%%%#%&%%%%%%##%%&&&&%%(*,\\n//                                #%%%%%%&&%%%#%%%%%%%%%%%%%%%&#,*&&#.\\n//                            /%##%(%&/ #%%%%%%%%%%%%%%%%%%%%%%%%%&%%%.\\n//                                 *&%%%%&%%%%%%%%#%%%%%%%%%%%%%%%%%&%%%#%#%%,\\n//                        .*(#&%%%%%%%%&&%%%%%%%%%%#%%%%%%%%%%%%%%%(,\\n//                    ./#%%%%%%%%%%%%%%%%%%%%%%%#%&%#%%%%%%%%%%%%%%%%%%%%&%%%#####(.\\n//                          .,,*#%%%%%%%%%%%%%##%%&&%#%%%%%%%%&&%%%%%%(&*#&**/(*\\n//                        .,(&%%%%%#((%%%%%%#%%%%%%%%%#%%%%%%%&&&&&%%%%&%*\\n//                         ,,,,,..*&%%%%%%%%%%%%%%%%%%%%%%%&%%%%%%%%%#/*.\\n//                           ,#&%%%%%%%%%%%%%%%%%%%%%%%%&%%%%%%%%%%%%%%%%%%/,\\n//           .     .,*(#%%%%%%%%%&&&&%%%%%%&&&%%%%%%%%%&&%##%%%%%#,(%%%%%%%%%%%(((*\\n//             ,/((%%%%%#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%%%%&#  . . ...\\n//                      .,.,,**(%%%%%%%%&%##%%%%%%%%%%%%%%%%%%###%%%%%%%%%&*\\n//                       ,%&%%%%%&&%%%%%%%#%%%%%%%%%%%%%%%%%%&%%%%##%%%%%%%%%%%%%%%%&&#.\\n//              .(&&&%%%%%%&#&&%&%%%%%%%##%%%%&&%%%#%%%%%%&%%%%%%&&%%%%&&&/*(,(#(,,.\\n//                         ..&%%%%%%#%#%%%%%%%%%%%##%%%%%%%&%%%%%%%%%%%%%%%%&&(.\\n//                      ,%%%%%%%%%##%%%&%%%%%%%%&%%#%%&&%%%%&%%%%%%&%%%%%&(#%%%#,\\n//              ./%&%%%%%%%%%%%%%%%%%%%%%%%%%&&&%%%##%%%%%%%%%%%%%&&&%%%%%%%%&#.//*/,..\\n//      ,#%%%%%%%%%%%%%%%%%%&&%%%%%&&&&%%%%%&&&%%%%%#%%%%#%%%%%%%%%%%%%%%%%%%%%%%%%%&&(,..\\n//            ,#* ,&&&%,.,*(%%%%%%%%%&%%%%&&&%%%%%&%%%%#%%%%##%%%%%%%&&%%%%%%%%%%%#%%%%%%%%&%(*.\\n//          .,,/((#%&%#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&%#%%%%%%%%%%%%%%%%%#%%%%%%%((*\\n// *,//**,...,/#%%%%%%%%%%%&&&&%%%%%%%%%%%%%#%%%%%%&&&%%%%&&&&%%%#%%#%%%%%%%%%%%%%%%#*.       .,(#%&@*\\n//  .*%%(*(%%%%%%%%%%&&&&&&&&%%%%%%%&&%%%%%%%%%%%%%&&&%%%%%%%%%##%%%%%%%%%%%%%%%%%%%%%%%%%%%&%%%/..\\n//      .,/%&%%%%%%@#(&%&%%%%%%%%%#&&%%##%#%%%#%%%%&&&%%%%%%%%###%%%%%&&&%%%%%%%%%%%%%%%%&(//%%/\\n//          ,..     .(%%%%##%%%#%%%%%%#%%%%%##%%%%%&&&&%%%%%%%#&%#%%%%%%&&&%%%%%##//  ,,.\\n//            .,(%#%%##%%%#%%%#%%%#%%*,.*%%%%%%%%%&.,/&%%%%%%% #&%%#%%%%%&%(&%((%&&&(*\\n//                        ,/#/(%%,    ,&%%#%/.//         %*&(%#    .(,(%%%.\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./libs/PineUtils.sol\\\";\\nimport \\\"./libs/SafeERC20.sol\\\";\\nimport \\\"./libs/SafeMath.sol\\\";\\nimport \\\"./Interfaces/IModule.sol\\\";\\nimport \\\"./Interfaces/IHandler.sol\\\";\\nimport \\\"./Interfaces/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\n\\n// File: contracts/interfaces/IModule.sol\\n\\n// File: contracts/interfaces/IHandler.sol\\n\\n// File: contracts/commons/Order.sol\\n\\ncontract Order {\\n    address public constant ETH_ADDRESS =\\n        address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\\n}\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\n\\n// File: contracts/modules/LimitOrders.sol\\n\\n/*\\n * Original work by Pine.Finance\\n * - https://github.com/pine-finance\\n *\\n * Authors:\\n * - Agustin Aguilar <agusx1211>\\n * - Ignacio Mazzara <nachomazzara>\\n */\\ncontract Stoploss is IModule, Order {\\n    using SafeMath for uint256;\\n\\n    /// @notice receive ETH\\n    receive() external payable override {}\\n\\n    /**\\n     * @notice Executes an order\\n     * @param _inputToken - Address of the input token\\n     * @param _owner - Address of the order's owner\\n     * @param _data - Bytes of the order's data\\n     * @param _auxData - Bytes of the auxiliar data used for the handlers to execute the order\\n     * @return protectedFunds - amount of output token in saved value\\n     */\\n    function execute(\\n        IERC20 _inputToken,\\n        uint256,\\n        address payable _owner,\\n        bytes calldata _data,\\n        bytes calldata _auxData\\n    ) external override returns (uint256 protectedFunds) {\\n        (IERC20 outputToken, uint256 _stoploss, uint256 _slippage) = abi.decode(\\n            _data,\\n            (IERC20, uint256, uint256)\\n        );\\n\\n        IHandler handler = abi.decode(_auxData, (IHandler));\\n\\n        // Do not trust on _inputToken, it can mismatch the real balance\\n        uint256 inputAmount = PineUtils.balanceOf(_inputToken, address(this));\\n        // Handler gets Input Tokens\\n        _transferAmount(_inputToken, address(handler), inputAmount);\\n\\n        handler.handle(\\n            _inputToken,\\n            outputToken,\\n            inputAmount,\\n            _stoploss,\\n            _auxData\\n        );\\n\\n        protectedFunds = PineUtils.balanceOf(outputToken, address(this));\\n        require(\\n            protectedFunds <= _stoploss,\\n            \\\"StopLossOrders#execute: STOPLOSS_THRESHOLD_NOT_REACHED\\\"\\n        );\\n        require(\\n            protectedFunds >= _slippage,\\n            \\\"StopLossOrders#execute: OUTSIDE_SLIPPAGE\\\"\\n        );\\n\\n        _transferAmount(outputToken, _owner, protectedFunds);\\n\\n        return protectedFunds;\\n    }\\n\\n    /**\\n     * @notice Check whether an order can be executed or not\\n     * @param _inputToken - Address of the input token\\n     * @param _inputAmount - uint256 of the input token amount (order amount)\\n     * @param _data - Bytes of the order's data\\n     * @param _auxData - Bytes of the auxiliar data used for the handlers to execute the order\\n     * @return bool - whether the order can be executed or not\\n     */\\n    function canExecute(\\n        IERC20 _inputToken,\\n        uint256 _inputAmount,\\n        bytes calldata _data,\\n        bytes calldata _auxData\\n    ) external view override returns (bool) {\\n        (IERC20 outputToken, uint256 _stoploss, uint256 _slippage) = abi.decode(\\n            _data,\\n            (IERC20, uint256, uint256)\\n        );\\n        IHandler handler = abi.decode(_auxData, (IHandler));\\n\\n        return\\n            handler.canHandleStoploss(\\n                _inputToken,\\n                outputToken,\\n                _inputAmount,\\n                _stoploss,\\n                _slippage,\\n                _auxData\\n            );\\n    }\\n\\n    /**\\n     * @notice Transfer token or Ether amount to a recipient\\n     * @param _token - Address of the token\\n     * @param _to - Address of the recipient\\n     * @param _amount - uint256 of the amount to be transferred\\n     */\\n    function _transferAmount(\\n        IERC20 _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == ETH_ADDRESS) {\\n            (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n            require(\\n                success,\\n                \\\"LimitOrders#_transferAmount: ETH_TRANSFER_FAILED\\\"\\n            );\\n        } else {\\n            require(\\n                SafeERC20.transfer(_token, _to, _amount),\\n                \\\"LimitOrders#_transferAmount: TOKEN_TRANSFER_FAILED\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbf913efe9550ab0559201f094240eaeef2d2e79b70c66014998d8f9e01104a6f\",\"license\":\"MIT\"},\"contracts/libs/PineUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"../Interfaces/IERC20.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\nlibrary PineUtils {\\n    address internal constant ETH_ADDRESS =\\n        address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\\n\\n    /**\\n     * @notice Get the account's balance of token or ETH\\n     * @param _token - Address of the token\\n     * @param _addr - Address of the account\\n     * @return uint256 - Account's balance of token or ETH\\n     */\\n    function balanceOf(IERC20 _token, address _addr)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (ETH_ADDRESS == address(_token)) {\\n            return _addr.balance;\\n        }\\n\\n        return _token.balanceOf(_addr);\\n    }\\n\\n    /**\\n     * @notice Transfer token or ETH to a destinatary\\n     * @param _token - Address of the token\\n     * @param _to - Address of the recipient\\n     * @param _val - Uint256 of the amount to transfer\\n     * @return bool - Whether the transfer was success or not\\n     */\\n    function transfer(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _val\\n    ) internal returns (bool) {\\n        if (ETH_ADDRESS == address(_token)) {\\n            (bool success, ) = _to.call{value: _val}(\\\"\\\");\\n            return success;\\n        }\\n\\n        return SafeERC20.transfer(_token, _to, _val);\\n    }\\n}\\n\",\"keccak256\":\"0xb10edb3ef5b873802a12b6f67bd9039e26a98aee9c103f87fc0cd13df8da0fe6\",\"license\":\"MIT\"},\"contracts/libs/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"../Interfaces/IERC20.sol\\\";\\n\\nlibrary SafeERC20 {\\n    function transfer(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _val\\n    ) internal returns (bool) {\\n        (bool success, bytes memory data) = address(_token).call(\\n            abi.encodeWithSelector(_token.transfer.selector, _to, _val)\\n        );\\n        return success && (data.length == 0 || abi.decode(data, (bool)));\\n    }\\n}\\n\",\"keccak256\":\"0x79165e3db7cbbb966059582a41a9d6f9a9abb07d82be4ada835989f2a0f4b9e4\",\"license\":\"MIT\"},\"contracts/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xab82b2c0f101ecfbbe0b848b7b84ab115a100bb72d0822963116ec7847517b6a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c3c806100206000396000f3fe6080604052600436106100385760003560e01c8063a734f06e14610044578063e7ed35e314610085578063fd516dab146101be5761003f565b3661003f57005b600080fd5b34801561005057600080fd5b506100596102d9565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561009157600080fd5b506101a8600480360360a08110156100a857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561010f57600080fd5b82018360208201111561012157600080fd5b8035906020019184600183028401116401000000008311171561014357600080fd5b90919293919293908035906020019064010000000081111561016457600080fd5b82018360208201111561017657600080fd5b8035906020019184600183028401116401000000008311171561019857600080fd5b90919293919293905050506102f1565b6040518082815260200191505060405180910390f35b3480156101ca57600080fd5b506102c1600480360360808110156101e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561022857600080fd5b82018360208201111561023a57600080fd5b8035906020019184600183028401116401000000008311171561025c57600080fd5b90919293919293908035906020019064010000000081111561027d57600080fd5b82018360208201111561028f57600080fd5b803590602001918460018302840111640100000000831117156102b157600080fd5b909192939192939050505061057c565b60405180821515815260200191505060405180910390f35b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6000806000808787606081101561030757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505092509250925060008686602081101561035a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050509050600061038f8d3061072a565b905061039c8d838361083e565b8173ffffffffffffffffffffffffffffffffffffffff1663e42f5ea58e8784888d8d6040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050602060405180830381600087803b15801561046757600080fd5b505af115801561047b573d6000803e3d6000fd5b505050506040513d602081101561049157600080fd5b8101908080519060200190929190505050506104ad853061072a565b955083861115610508576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180610b476036913960400191505060405180910390fd5b82861015610561576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610b7d6028913960400191505060405180910390fd5b61056c858c8861083e565b5050505050979650505050505050565b6000806000808787606081101561059257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050509250925092506000868660208110156105e557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663f728ff618c868d87878d8d6040518863ffffffff1660e01b8152600401808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509850505050505050505060206040518083038186803b1580156106df57600080fd5b505afa1580156106f3573d6000803e3d6000fd5b505050506040513d602081101561070957600080fd5b81019080805190602001909291905050509450505050509695505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff161415610793578173ffffffffffffffffffffffffffffffffffffffff16319050610838565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156107fa57600080fd5b505afa15801561080e573d6000803e3d6000fd5b505050506040513d602081101561082457600080fd5b810190808051906020019092919050505090505b92915050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561094b5760008273ffffffffffffffffffffffffffffffffffffffff168260405180600001905060006040518083038185875af1925050503d80600081146108e6576040519150601f19603f3d011682016040523d82523d6000602084013e6108eb565b606091505b5050905080610945576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180610bd76030913960400191505060405180910390fd5b506109ac565b6109568383836109b1565b6109ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526032815260200180610ba56032913960400191505060405180910390fd5b5b505050565b60008060608573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8686604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310610a945780518252602082019150602081019050602083039250610a71565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610af6576040519150601f19603f3d011682016040523d82523d6000602084013e610afb565b606091505b5091509150818015610b3b5750600081511480610b3a5750808060200190516020811015610b2857600080fd5b81019080805190602001909291905050505b5b92505050939250505056fe53746f704c6f73734f726465727323657865637574653a2053544f504c4f53535f5448524553484f4c445f4e4f545f5245414348454453746f704c6f73734f726465727323657865637574653a204f5554534944455f534c4950504147454c696d69744f7264657273235f7472616e73666572416d6f756e743a20544f4b454e5f5452414e534645525f4641494c45444c696d69744f7264657273235f7472616e73666572416d6f756e743a204554485f5452414e534645525f4641494c4544a2646970667358221220f11e397ff2ce52a1642446f42e5516873b733457ef031baae91defb46b4ead5164736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106100385760003560e01c8063a734f06e14610044578063e7ed35e314610085578063fd516dab146101be5761003f565b3661003f57005b600080fd5b34801561005057600080fd5b506100596102d9565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561009157600080fd5b506101a8600480360360a08110156100a857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561010f57600080fd5b82018360208201111561012157600080fd5b8035906020019184600183028401116401000000008311171561014357600080fd5b90919293919293908035906020019064010000000081111561016457600080fd5b82018360208201111561017657600080fd5b8035906020019184600183028401116401000000008311171561019857600080fd5b90919293919293905050506102f1565b6040518082815260200191505060405180910390f35b3480156101ca57600080fd5b506102c1600480360360808110156101e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561022857600080fd5b82018360208201111561023a57600080fd5b8035906020019184600183028401116401000000008311171561025c57600080fd5b90919293919293908035906020019064010000000081111561027d57600080fd5b82018360208201111561028f57600080fd5b803590602001918460018302840111640100000000831117156102b157600080fd5b909192939192939050505061057c565b60405180821515815260200191505060405180910390f35b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6000806000808787606081101561030757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505092509250925060008686602081101561035a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050509050600061038f8d3061072a565b905061039c8d838361083e565b8173ffffffffffffffffffffffffffffffffffffffff1663e42f5ea58e8784888d8d6040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050602060405180830381600087803b15801561046757600080fd5b505af115801561047b573d6000803e3d6000fd5b505050506040513d602081101561049157600080fd5b8101908080519060200190929190505050506104ad853061072a565b955083861115610508576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180610b476036913960400191505060405180910390fd5b82861015610561576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610b7d6028913960400191505060405180910390fd5b61056c858c8861083e565b5050505050979650505050505050565b6000806000808787606081101561059257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050509250925092506000868660208110156105e557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663f728ff618c868d87878d8d6040518863ffffffff1660e01b8152600401808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509850505050505050505060206040518083038186803b1580156106df57600080fd5b505afa1580156106f3573d6000803e3d6000fd5b505050506040513d602081101561070957600080fd5b81019080805190602001909291905050509450505050509695505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff161415610793578173ffffffffffffffffffffffffffffffffffffffff16319050610838565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156107fa57600080fd5b505afa15801561080e573d6000803e3d6000fd5b505050506040513d602081101561082457600080fd5b810190808051906020019092919050505090505b92915050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561094b5760008273ffffffffffffffffffffffffffffffffffffffff168260405180600001905060006040518083038185875af1925050503d80600081146108e6576040519150601f19603f3d011682016040523d82523d6000602084013e6108eb565b606091505b5050905080610945576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180610bd76030913960400191505060405180910390fd5b506109ac565b6109568383836109b1565b6109ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526032815260200180610ba56032913960400191505060405180910390fd5b5b505050565b60008060608573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8686604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310610a945780518252602082019150602081019050602083039250610a71565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610af6576040519150601f19603f3d011682016040523d82523d6000602084013e610afb565b606091505b5091509150818015610b3b5750600081511480610b3a5750808060200190516020811015610b2857600080fd5b81019080805190602001909291905050505b5b92505050939250505056fe53746f704c6f73734f726465727323657865637574653a2053544f504c4f53535f5448524553484f4c445f4e4f545f5245414348454453746f704c6f73734f726465727323657865637574653a204f5554534944455f534c4950504147454c696d69744f7264657273235f7472616e73666572416d6f756e743a20544f4b454e5f5452414e534645525f4641494c45444c696d69744f7264657273235f7472616e73666572416d6f756e743a204554485f5452414e534645525f4641494c4544a2646970667358221220f11e397ff2ce52a1642446f42e5516873b733457ef031baae91defb46b4ead5164736f6c634300060c0033",
  "devdoc": {
    "details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
    "kind": "dev",
    "methods": {
      "canExecute(address,uint256,bytes,bytes)": {
        "params": {
          "_auxData": "- Bytes of the auxiliar data used for the handlers to execute the order",
          "_data": "- Bytes of the order's data",
          "_inputAmount": "- uint256 of the input token amount (order amount)",
          "_inputToken": "- Address of the input token"
        },
        "returns": {
          "_0": "bool - whether the order can be executed or not"
        }
      },
      "execute(address,uint256,address,bytes,bytes)": {
        "params": {
          "_auxData": "- Bytes of the auxiliar data used for the handlers to execute the order",
          "_data": "- Bytes of the order's data",
          "_inputToken": "- Address of the input token",
          "_owner": "- Address of the order's owner"
        },
        "returns": {
          "protectedFunds": "- amount of output token in saved value"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canExecute(address,uint256,bytes,bytes)": {
        "notice": "Check whether an order can be executed or not"
      },
      "execute(address,uint256,address,bytes,bytes)": {
        "notice": "Executes an order"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}