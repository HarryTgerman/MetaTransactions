{
  "address": "0xf0F5e9b00b92f3999021fD8B88aC75c351D93fc7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract IWETH",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_codeHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FACTORY_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_outputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReturn",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "canHandle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_outputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stoploss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "canHandleStoploss",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_outputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "handle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bought",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_outputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReturn",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "simulate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbd8e7f8d83283b581c58f5ee39b3256b72ffcc75f4b7457e0d014d873f5088fd",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xf0F5e9b00b92f3999021fD8B88aC75c351D93fc7",
    "transactionIndex": 0,
    "gasUsed": "1998140",
    "logsBloom": "0x
    "blockHash": "0x82954f8369cceff2e0bb8b60dfa48ba77d917025525097e96e31d57d24df19a7",
    "transactionHash": "0xbd8e7f8d83283b581c58f5ee39b3256b72ffcc75f4b7457e0d014d873f5088fd",
    "logs": [],
    "blockNumber": 20599676,
    "cumulativeGasUsed": "1998140",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5757371414417b8c6caad45baef941abc7d3ab32",
    "0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270",
    "0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f"
  ],
  "solcInputHash": "e69c2d36a1fc06e854bf5ef1babaf72c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_codeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"canHandle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stoploss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"canHandleStoploss\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bought\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"simulate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canHandle(address,address,uint256,uint256,bytes)\":{\"params\":{\"_data\":\"- Bytes of arbitrary data\",\"_inputAmount\":\"- uint256 of the input token amount\",\"_inputToken\":\"- Address of the input token\",\"_minReturn\":\"- uint256 of the min return amount of output token\",\"_outputToken\":\"- Address of the output token\"},\"returns\":{\"_0\":\"bool - Whether the execution can be handled or not\"}},\"constructor\":{\"params\":{\"_codeHash\":\"- Bytes32 of the uniswap v2 pair contract unit code hash\",\"_factory\":\"- Address of the uniswap v2 factory contract\",\"_weth\":\"- Address of WETH contract\"}},\"handle(address,address,uint256,uint256,bytes)\":{\"params\":{\"_data\":\"- Bytes of arbitrary data\",\"_inputToken\":\"- Address of the input token\",\"_outputToken\":\"- Address of the output token\"},\"returns\":{\"bought\":\"- Amount of output token bought\"}},\"simulate(address,address,uint256,uint256,bytes)\":{\"params\":{\"_data\":\"- Bytes of arbitrary data\",\"_inputAmount\":\"- uint256 of the input token amount\",\"_inputToken\":\"- Address of the input token\",\"_minReturn\":\"- uint256 of the min return amount of output token\",\"_outputToken\":\"- Address of the output token\"},\"returns\":{\"_0\":\"bool - Whether the execution can be handled or not\",\"_1\":\"uint256 - Amount of output token bought\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canHandle(address,address,uint256,uint256,bytes)\":{\"notice\":\"Check whether can handle an order execution\"},\"constructor\":\"Creates the handler\",\"handle(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handle an order execution\"},\"simulate(address,address,uint256,uint256,bytes)\":{\"notice\":\"Simulate an order execution\"}},\"notice\":\"UniswapV2 Handler used to execute an order\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Handler.sol\":\"UniswapV2Handler\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Handler.sol\":{\"content\":\"/**\\n *Submitted for verification at polygonscan.com on 2021-06-17\\n */\\n\\n/**\\n *Submitted for verification at FtmScan.com on 2021-05-26\\n */\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\n/**\\n *Submitted for verification at Etherscan.io on 2020-08-30\\n */\\n\\n// File: contracts/interfaces/IERC20.sol\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\n// File: contracts/interfaces/IWETH.sol\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\\n// File: contracts/interfaces/IHandler.sol\\n\\ninterface IHandler {\\n    /// @notice receive ETH\\n    receive() external payable;\\n\\n    /**\\n     * @notice Handle an order execution\\n     * @param _inputToken - Address of the input token\\n     * @param _outputToken - Address of the output token\\n     * @param _inputAmount - uint256 of the input token amount\\n     * @param _minReturn - uint256 of the min return amount of output token\\n     * @param _data - Bytes of arbitrary data\\n     * @return bought - Amount of output token bought\\n     */\\n    function handle(\\n        IERC20 _inputToken,\\n        IERC20 _outputToken,\\n        uint256 _inputAmount,\\n        uint256 _minReturn,\\n        bytes calldata _data\\n    ) external payable returns (uint256 bought);\\n\\n    /**\\n     * @notice Check whether can handle an order execution\\n     * @param _inputToken - Address of the input token\\n     * @param _outputToken - Address of the output token\\n     * @param _inputAmount - uint256 of the input token amount\\n     * @param _minReturn - uint256 of the min return amount of output token\\n     * @param _data - Bytes of arbitrary data\\n     * @return bool - Whether the execution can be handled or not\\n     */\\n    function canHandle(\\n        IERC20 _inputToken,\\n        IERC20 _outputToken,\\n        uint256 _inputAmount,\\n        uint256 _minReturn,\\n        bytes calldata _data\\n    ) external view returns (bool);\\n\\n    function canHandleStoploss(\\n        IERC20 _inputToken,\\n        IERC20 _outputToken,\\n        uint256 _inputAmount,\\n        uint256 _stoploss,\\n        uint256 _slppage,\\n        bytes calldata _data\\n    ) external view returns (bool);\\n}\\n\\n// File: contracts/interfaces/uniswapV2/IUniswapV2Pair.sol\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\n// File: contracts/libs/SafeMath.sol\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: contracts/libs/UniswapUtils.sol\\n\\nlibrary UniswapUtils {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n     * @return uint32 - block timestamp\\n     */\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2**32);\\n    }\\n\\n    /**\\n     * @notice Returns sorted token addresses, used to handle return values from pairs sorted in this order\\n     * @param _tokenA - Address of the token A\\n     * @param _tokenB - Address of the token B\\n     * @return token0 - Address of the lower token\\n     * @return token1 - Address of the higher token\\n     */\\n    function sortTokens(address _tokenA, address _tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(\\n            _tokenA != _tokenB,\\n            \\\"UniswapUtils#sortTokens: IDENTICAL_ADDRESSES\\\"\\n        );\\n        (token0, token1) = _tokenA < _tokenB\\n            ? (_tokenA, _tokenB)\\n            : (_tokenB, _tokenA);\\n        require(token0 != address(0), \\\"UniswapUtils#sortTokens: ZERO_ADDRESS\\\");\\n    }\\n\\n    /**\\n     * @notice Calculates the CREATE2 address for a pair without making any external calls\\n     * @param _factory - Address of the uniswapV2 factory contract\\n     * @param _tokenA - Address of the token A\\n     * @param _tokenB - Address of the token B\\n     * @param _initCodeHash - Bytes32 of the uniswap v2 pair contract unit code hash\\n     * @return pair - Address of the pair\\n     */\\n    function pairFor(\\n        address _factory,\\n        address _tokenA,\\n        address _tokenB,\\n        bytes32 _initCodeHash\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(_tokenA, _tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        _factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        _initCodeHash // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the CREATE2 address for a pair without making any external calls\\n     * @dev Tokens should be in order\\n     * @param _factory - Address of the uniswapV2 factory contract\\n     * @param _token0 - Address of the token 0\\n     * @param _token1 - Address of the token 1\\n     * @param _initCodeHash - Bytes32 of the uniswap v2 pair contract unit code hash\\n     * @return pair - Address of the pair\\n     */\\n    function pairForSorted(\\n        address _factory,\\n        address _token0,\\n        address _token1,\\n        bytes32 _initCodeHash\\n    ) internal pure returns (address pair) {\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        _factory,\\n                        keccak256(abi.encodePacked(_token0, _token1)),\\n                        _initCodeHash // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n     * @param _amountIn - uint of the input token's amount\\n     * @param _reserveIn - uint of the input token's reserve\\n     * @param _reserveOut - uint of the output token's reserve\\n     * @return amountOut - Maximum output amount\\n     */\\n    function getAmountOut(\\n        uint256 _amountIn,\\n        uint256 _reserveIn,\\n        uint256 _reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(\\n            _amountIn > 0,\\n            \\\"UniswapUtils#getAmountOut: INSUFFICIENT_INPUT_AMOUNT\\\"\\n        );\\n        require(\\n            _reserveIn > 0 && _reserveOut > 0,\\n            \\\"UniswapUtils#getAmountOut: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = _amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(_reserveOut);\\n        uint256 denominator = _reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n}\\n\\n// File: contracts/libs/SafeERC20.sol\\n\\nlibrary SafeERC20 {\\n    function transfer(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _val\\n    ) internal returns (bool) {\\n        (bool success, bytes memory data) = address(_token).call(\\n            abi.encodeWithSelector(_token.transfer.selector, _to, _val)\\n        );\\n        return success && (data.length == 0 || abi.decode(data, (bool)));\\n    }\\n}\\n\\n// File: contracts/libs/PineUtils.sol\\n\\nlibrary PineUtils {\\n    address internal constant ETH_ADDRESS =\\n        address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\\n\\n    /**\\n     * @notice Get the account's balance of token or ETH\\n     * @param _token - Address of the token\\n     * @param _addr - Address of the account\\n     * @return uint256 - Account's balance of token or ETH\\n     */\\n    function balanceOf(IERC20 _token, address _addr)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (ETH_ADDRESS == address(_token)) {\\n            return _addr.balance;\\n        }\\n\\n        return _token.balanceOf(_addr);\\n    }\\n\\n    /**\\n     * @notice Transfer token or ETH to a destinatary\\n     * @param _token - Address of the token\\n     * @param _to - Address of the recipient\\n     * @param _val - Uint256 of the amount to transfer\\n     * @return bool - Whether the transfer was success or not\\n     */\\n    function transfer(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _val\\n    ) internal returns (bool) {\\n        if (ETH_ADDRESS == address(_token)) {\\n            (bool success, ) = _to.call{value: _val}(\\\"\\\");\\n            return success;\\n        }\\n\\n        return SafeERC20.transfer(_token, _to, _val);\\n    }\\n}\\n\\n// File: contracts/handlers/UniswapV2Handler.sol\\n\\n/// @notice UniswapV2 Handler used to execute an order\\ncontract UniswapV2Handler is IHandler {\\n    using SafeMath for uint256;\\n\\n    IWETH public immutable WETH;\\n    address public immutable FACTORY;\\n    bytes32 public immutable FACTORY_CODE_HASH;\\n\\n    /**\\n     * @notice Creates the handler\\n     * @param _factory - Address of the uniswap v2 factory contract\\n     * @param _weth - Address of WETH contract\\n     * @param _codeHash - Bytes32 of the uniswap v2 pair contract unit code hash\\n     */\\n    constructor(\\n        address _factory,\\n        IWETH _weth,\\n        bytes32 _codeHash\\n    ) public {\\n        FACTORY = _factory;\\n        WETH = _weth;\\n        FACTORY_CODE_HASH = _codeHash;\\n    }\\n\\n    /// @notice receive ETH\\n    receive() external payable override {\\n        require(\\n            msg.sender != tx.origin,\\n            \\\"UniswapV2Handler#receive: NO_SEND_ETH_PLEASE\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Handle an order execution\\n     * @param _inputToken - Address of the input token\\n     * @param _outputToken - Address of the output token\\n     * @param _data - Bytes of arbitrary data\\n     * @return bought - Amount of output token bought\\n     */\\n    function handle(\\n        IERC20 _inputToken,\\n        IERC20 _outputToken,\\n        uint256,\\n        uint256,\\n        bytes calldata _data\\n    ) external payable override returns (uint256 bought) {\\n        // Load real initial balance, don't trust provided value\\n        uint256 amount = PineUtils.balanceOf(_inputToken, address(this));\\n        address inputToken = address(_inputToken);\\n        address outputToken = address(_outputToken);\\n        address weth = address(WETH);\\n\\n        // Decode extra data\\n        (, address relayer, uint256 fee) = abi.decode(\\n            _data,\\n            (address, address, uint256)\\n        );\\n\\n        if (inputToken == weth || inputToken == PineUtils.ETH_ADDRESS) {\\n            // Swap WETH -> outputToken\\n            amount = amount.sub(fee);\\n\\n            // Convert from ETH to WETH if necessary\\n            if (inputToken == PineUtils.ETH_ADDRESS) {\\n                WETH.deposit{value: amount}();\\n                inputToken = weth;\\n            } else {\\n                WETH.withdraw(fee);\\n            }\\n\\n            // Trade\\n            bought = _swap(inputToken, outputToken, amount, msg.sender);\\n        } else if (\\n            outputToken == weth || outputToken == PineUtils.ETH_ADDRESS\\n        ) {\\n            // Swap inputToken -> WETH\\n            bought = _swap(inputToken, weth, amount, address(this));\\n\\n            // Convert from WETH to ETH if necessary\\n            if (outputToken == PineUtils.ETH_ADDRESS) {\\n                WETH.withdraw(bought);\\n            } else {\\n                WETH.withdraw(fee);\\n            }\\n\\n            // Transfer amount to sender\\n            bought = bought.sub(fee);\\n            PineUtils.transfer(IERC20(outputToken), msg.sender, bought);\\n        } else {\\n            // Swap inputToken -> WETH -> outputToken\\n            //  - inputToken -> WETH\\n            bought = _swap(inputToken, weth, amount, address(this));\\n\\n            // Withdraw fee\\n            WETH.withdraw(fee);\\n\\n            // - WETH -> outputToken\\n            bought = _swap(weth, outputToken, bought.sub(fee), msg.sender);\\n        }\\n\\n        // Send fee to relayer\\n        (bool successRelayer, ) = relayer.call{value: fee}(\\\"\\\");\\n        require(\\n            successRelayer,\\n            \\\"UniswapV2Handler#handle: TRANSFER_ETH_TO_RELAYER_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Check whether can handle an order execution\\n     * @param _inputToken - Address of the input token\\n     * @param _outputToken - Address of the output token\\n     * @param _inputAmount - uint256 of the input token amount\\n     * @param _minReturn - uint256 of the min return amount of output token\\n     * @param _data - Bytes of arbitrary data\\n     * @return bool - Whether the execution can be handled or not\\n     */\\n    function canHandle(\\n        IERC20 _inputToken,\\n        IERC20 _outputToken,\\n        uint256 _inputAmount,\\n        uint256 _minReturn,\\n        bytes calldata _data\\n    ) external view override returns (bool) {\\n        address inputToken = address(_inputToken);\\n        address outputToken = address(_outputToken);\\n        address weth = address(WETH);\\n\\n        // Decode extra data\\n        (, , uint256 fee) = abi.decode(_data, (address, address, uint256));\\n\\n        if (inputToken == weth || inputToken == PineUtils.ETH_ADDRESS) {\\n            if (_inputAmount <= fee) {\\n                return false;\\n            }\\n\\n            return\\n                _estimate(weth, outputToken, _inputAmount.sub(fee)) >=\\n                _minReturn;\\n        } else if (\\n            outputToken == weth || outputToken == PineUtils.ETH_ADDRESS\\n        ) {\\n            uint256 bought = _estimate(inputToken, weth, _inputAmount);\\n\\n            if (bought <= fee) {\\n                return false;\\n            }\\n\\n            return bought.sub(fee) >= _minReturn;\\n        } else {\\n            uint256 bought = _estimate(inputToken, weth, _inputAmount);\\n            if (bought <= fee) {\\n                return false;\\n            }\\n\\n            return _estimate(weth, outputToken, bought.sub(fee)) >= _minReturn;\\n        }\\n    }\\n\\n    function canHandleStoploss(\\n        IERC20 _inputToken,\\n        IERC20 _outputToken,\\n        uint256 _inputAmount,\\n        uint256 _stoploss,\\n        uint256 _slippage,\\n        bytes calldata _data\\n    ) external view override returns (bool) {\\n        address inputToken = address(_inputToken);\\n        address outputToken = address(_outputToken);\\n        address weth = address(WETH);\\n\\n        // Decode extra data\\n        (, , uint256 fee) = abi.decode(_data, (address, address, uint256));\\n\\n        if (inputToken == weth || inputToken == PineUtils.ETH_ADDRESS) {\\n            if (_inputAmount <= fee) {\\n                return false;\\n            }\\n            uint256 savedFunds = _estimate(\\n                weth,\\n                outputToken,\\n                _inputAmount.sub(fee)\\n            );\\n            return savedFunds <= _stoploss && savedFunds >= _slippage;\\n        } else if (\\n            outputToken == weth || outputToken == PineUtils.ETH_ADDRESS\\n        ) {\\n            uint256 savedFunds = _estimate(inputToken, weth, _inputAmount);\\n\\n            if (savedFunds <= fee) {\\n                return false;\\n            }\\n\\n            return savedFunds.sub(fee) <= _stoploss && savedFunds >= _slippage;\\n        } else {\\n            uint256 savedFunds = _estimate(inputToken, weth, _inputAmount);\\n            if (savedFunds <= fee) {\\n                return false;\\n            }\\n\\n            return\\n                _estimate(weth, outputToken, savedFunds.sub(fee)) <=\\n                _stoploss &&\\n                savedFunds >= _slippage;\\n        }\\n    }\\n\\n    /**\\n     * @notice Simulate an order execution\\n     * @param _inputToken - Address of the input token\\n     * @param _outputToken - Address of the output token\\n     * @param _inputAmount - uint256 of the input token amount\\n     * @param _minReturn - uint256 of the min return amount of output token\\n     * @param _data - Bytes of arbitrary data\\n     * @return bool - Whether the execution can be handled or not\\n     * @return uint256 - Amount of output token bought\\n     */\\n    function simulate(\\n        IERC20 _inputToken,\\n        IERC20 _outputToken,\\n        uint256 _inputAmount,\\n        uint256 _minReturn,\\n        bytes calldata _data\\n    ) external view returns (bool, uint256) {\\n        address inputToken = address(_inputToken);\\n        address outputToken = address(_outputToken);\\n        address weth = address(WETH);\\n\\n        // Decode extra data\\n        (, , uint256 fee) = abi.decode(_data, (address, address, uint256));\\n\\n        uint256 bought;\\n\\n        if (inputToken == weth || inputToken == PineUtils.ETH_ADDRESS) {\\n            if (_inputAmount <= fee) {\\n                return (false, 0);\\n            }\\n\\n            bought = _estimate(weth, outputToken, _inputAmount.sub(fee));\\n        } else if (\\n            outputToken == weth || outputToken == PineUtils.ETH_ADDRESS\\n        ) {\\n            bought = _estimate(inputToken, weth, _inputAmount);\\n            if (bought <= fee) {\\n                return (false, 0);\\n            }\\n\\n            bought = bought.sub(fee);\\n        } else {\\n            bought = _estimate(inputToken, weth, _inputAmount);\\n            if (bought <= fee) {\\n                return (false, 0);\\n            }\\n\\n            bought = _estimate(weth, outputToken, bought.sub(fee));\\n        }\\n        return (bought >= _minReturn, bought);\\n    }\\n\\n    /**\\n     * @notice Estimate output token amount\\n     * @param _inputToken - Address of the input token\\n     * @param _outputToken - Address of the output token\\n     * @param _inputAmount - uint256 of the input token amount\\n     * @return bought - Amount of output token bought\\n     */\\n    function _estimate(\\n        address _inputToken,\\n        address _outputToken,\\n        uint256 _inputAmount\\n    ) internal view returns (uint256 bought) {\\n        // Get uniswap trading pair\\n        (address token0, address token1) = UniswapUtils.sortTokens(\\n            _inputToken,\\n            _outputToken\\n        );\\n        IUniswapV2Pair pair = IUniswapV2Pair(\\n            UniswapUtils.pairForSorted(\\n                FACTORY,\\n                token0,\\n                token1,\\n                FACTORY_CODE_HASH\\n            )\\n        );\\n\\n        // Compute limit for uniswap trade\\n        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\\n\\n        // Optimal amounts for uniswap trade\\n        uint256 reserveIn;\\n        uint256 reserveOut;\\n        if (_inputToken == token0) {\\n            reserveIn = reserve0;\\n            reserveOut = reserve1;\\n        } else {\\n            reserveIn = reserve1;\\n            reserveOut = reserve0;\\n        }\\n\\n        bought = UniswapUtils.getAmountOut(_inputAmount, reserveIn, reserveOut);\\n    }\\n\\n    /**\\n     * @notice Swap input token to output token\\n     * @param _inputToken - Address of the input token\\n     * @param _outputToken - Address of the output token\\n     * @param _inputAmount - uint256 of the input token amount\\n     * @param _recipient - Address of the recipient\\n     * @return bought - Amount of output token bought\\n     */\\n    function _swap(\\n        address _inputToken,\\n        address _outputToken,\\n        uint256 _inputAmount,\\n        address _recipient\\n    ) internal returns (uint256 bought) {\\n        // Get uniswap trading pair\\n        (address token0, address token1) = UniswapUtils.sortTokens(\\n            _inputToken,\\n            _outputToken\\n        );\\n        IUniswapV2Pair pair = IUniswapV2Pair(\\n            UniswapUtils.pairForSorted(\\n                FACTORY,\\n                token0,\\n                token1,\\n                FACTORY_CODE_HASH\\n            )\\n        );\\n\\n        // Send tokens to uniswap pair\\n        require(\\n            SafeERC20.transfer(\\n                IERC20(_inputToken),\\n                address(pair),\\n                _inputAmount\\n            ),\\n            \\\"UniswapV2Handler#_swap: ERROR_SENDING_TOKENS\\\"\\n        );\\n\\n        // Get current reserves\\n        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\\n\\n        // Optimal amounts for uniswap trade\\n        {\\n            uint256 reserveIn;\\n            uint256 reserveOut;\\n            if (_inputToken == token0) {\\n                reserveIn = reserve0;\\n                reserveOut = reserve1;\\n            } else {\\n                reserveIn = reserve1;\\n                reserveOut = reserve0;\\n            }\\n            bought = UniswapUtils.getAmountOut(\\n                _inputAmount,\\n                reserveIn,\\n                reserveOut\\n            );\\n        }\\n\\n        // Determine if output amount is token1 or token0\\n        uint256 amount1Out;\\n        uint256 amount0Out;\\n        if (_inputToken == token0) {\\n            amount1Out = bought;\\n        } else {\\n            amount0Out = bought;\\n        }\\n\\n        // Execute swap\\n        pair.swap(amount0Out, amount1Out, _recipient, bytes(\\\"\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0x493b985a5db589ae7f185c1feefe2f3efea1a6f80ed4f2d0ee580a2942fe8b0b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506040516124823803806124828339818101604052606081101561003357600080fd5b810190808051906020019092919080519060200190929190805190602001909291905050508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508060c0818152505050505060805160601c60a05160601c60c05161233e61014460003980610a7a528061142b52806116e3525080610576528061140852806116c05250806105a752806108175280610a9e5280610add5280610c445280610ccd5280610e405280610ed05280610f90528061111a525061233e6000f3fe6080604052600436106100745760003560e01c8063a97763af1161004e578063a97763af1461032d578063ad5c464814610358578063e42f5ea514610399578063f728ff611461047a57610100565b80632dd310001461010557806334ef68dd1461014657806345c0197a1461023657610100565b36610100573273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156100fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806121a3602c913960400191505060405180910390fd5b005b600080fd5b34801561011157600080fd5b5061011a610574565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561015257600080fd5b5061021e600480360360a081101561016957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001906401000000008111156101da57600080fd5b8201836020820111156101ec57600080fd5b8035906020019184600183028401116401000000008311171561020e57600080fd5b9091929391929390505050610598565b60405180821515815260200191505060405180910390f35b34801561024257600080fd5b5061030e600480360360a081101561025957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001906401000000008111156102ca57600080fd5b8201836020820111156102dc57600080fd5b803590602001918460018302840111640100000000831117156102fe57600080fd5b9091929391929390505050610806565b6040518083151581526020018281526020019250505060405180910390f35b34801561033957600080fd5b50610342610a78565b6040518082815260200191505060405180910390f35b34801561036457600080fd5b5061036d610a9c565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610464600480360360a08110156103af57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561042057600080fd5b82018360208201111561043257600080fd5b8035906020019184600183028401116401000000008311171561045457600080fd5b9091929391929390505050610ac0565b6040518082815260200191505060405180910390f35b34801561048657600080fd5b5061055c600480360360c081101561049d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561051857600080fd5b82018360208201111561052a57600080fd5b8035906020019184600183028401116401000000008311171561054c57600080fd5b909192939192939050505061110b565b60405180821515815260200191505060405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b600080879050600087905060007f000000000000000000000000000000000000000000000000000000000000000090506000868660608110156105da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050925050508173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806106a8575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b156106ec578089116106c15760009450505050506107fc565b876106df83856106da858e6113a490919063ffffffff16565b6113ee565b10159450505050506107fc565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610765575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b156107b057600061077785848c6113ee565b905081811161078e576000955050505050506107fc565b886107a283836113a490919063ffffffff16565b1015955050505050506107fc565b60006107bd85848c6113ee565b90508181116107d4576000955050505050506107fc565b886107f284866107ed86866113a490919063ffffffff16565b6113ee565b1015955050505050505b9695505050505050565b6000806000889050600088905060007f0000000000000000000000000000000000000000000000000000000000000000905060008787606081101561084a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050509250505060008273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061091a575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b1561095b57818b1161093757600080965096505050505050610a6d565b610954838561094f858f6113a490919063ffffffff16565b6113ee565b9050610a5e565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806109d4575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b15610a18576109e485848d6113ee565b90508181116109fe57600080965096505050505050610a6d565b610a1182826113a490919063ffffffff16565b9050610a5d565b610a2385848d6113ee565b9050818111610a3d57600080965096505050505050610a6d565b610a5a8385610a5585856113a490919063ffffffff16565b6113ee565b90505b5b89811015819650965050505050505b965096945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080610acd8830611592565b90506000889050600088905060007f0000000000000000000000000000000000000000000000000000000000000000905060008088886060811015610b1157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505092509250508273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610be0575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b15610d6a57610bf881876113a490919063ffffffff16565b955073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610ccb577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b158015610caa57600080fd5b505af1158015610cbe573d6000803e3d6000fd5b5050505050829450610d57565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610d3e57600080fd5b505af1158015610d52573d6000803e3d6000fd5b505050505b610d63858588336116a6565b965061103b565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610de3575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b15610f8057610df4858488306116a6565b965073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610ece577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d886040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610eb157600080fd5b505af1158015610ec5573d6000803e3d6000fd5b50505050610f5a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610f4157600080fd5b505af1158015610f55573d6000803e3d6000fd5b505050505b610f6d81886113a490919063ffffffff16565b9650610f7a8433896119fd565b5061103a565b610f8c858488306116a6565b96507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561100157600080fd5b505af1158015611015573d6000803e3d6000fd5b505050506110378385611031848b6113a490919063ffffffff16565b336116a6565b96505b5b60008273ffffffffffffffffffffffffffffffffffffffff168260405180600001905060006040518083038185875af1925050503d806000811461109b576040519150601f19603f3d011682016040523d82523d6000602084013e6110a0565b606091505b50509050806110fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603781526020018061229e6037913960400191505060405180910390fd5b505050505050509695505050505050565b600080889050600088905060007f0000000000000000000000000000000000000000000000000000000000000000905060008686606081101561114d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050925050508173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061121b575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b1561127157808a11611234576000945050505050611399565b6000611253838561124e858f6113a490919063ffffffff16565b6113ee565b90508981111580156112655750888110155b95505050505050611399565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806112ea575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b156113415760006112fc85848d6113ee565b905081811161131357600095505050505050611399565b8961132783836113a490919063ffffffff16565b111580156113355750888110155b95505050505050611399565b600061134e85848d6113ee565b905081811161136557600095505050505050611399565b89611383848661137e86866113a490919063ffffffff16565b6113ee565b111580156113915750888110155b955050505050505b979650505050505050565b60006113e683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611ace565b905092915050565b60008060006113fd8686611b8e565b91509150600061144f7f000000000000000000000000000000000000000000000000000000000000000084847f0000000000000000000000000000000000000000000000000000000000000000611ce8565b90506000808273ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561149a57600080fd5b505afa1580156114ae573d6000803e3d6000fd5b505050506040513d60608110156114c457600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505050915091506000808673ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16141561155057836dffffffffffffffffffffffffffff169150826dffffffffffffffffffffffffffff169050611577565b826dffffffffffffffffffffffffffff169150836dffffffffffffffffffffffffffff1690505b611582898383611dcf565b9750505050505050509392505050565b60008273ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff1614156115fb578173ffffffffffffffffffffffffffffffffffffffff163190506116a0565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561166257600080fd5b505afa158015611676573d6000803e3d6000fd5b505050506040513d602081101561168c57600080fd5b810190808051906020019092919050505090505b92915050565b60008060006116b58787611b8e565b9150915060006117077f000000000000000000000000000000000000000000000000000000000000000084847f0000000000000000000000000000000000000000000000000000000000000000611ce8565b9050611714888288611eff565b611769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180612272602c913960400191505060405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156117b257600080fd5b505afa1580156117c6573d6000803e3d6000fd5b505050506040513d60608110156117dc57600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505050915091506000808673ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff16141561186857836dffffffffffffffffffffffffffff169150826dffffffffffffffffffffffffffff16905061188f565b826dffffffffffffffffffffffffffff169150836dffffffffffffffffffffffffffff1690505b61189a8a8383611dcf565b975050506000808673ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614156118dd578791506118e1565b8790505b8473ffffffffffffffffffffffffffffffffffffffff1663022c0d9f82848c604051806020016040528060008152506040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561198757808201518184015260208101905061196c565b50505050905090810190601f1680156119b45780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156119d657600080fd5b505af11580156119ea573d6000803e3d6000fd5b5050505050505050505050949350505050565b60008373ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff161415611ab95760008373ffffffffffffffffffffffffffffffffffffffff168360405180600001905060006040518083038185875af1925050503d8060008114611aa7576040519150601f19603f3d011682016040523d82523d6000602084013e611aac565b606091505b5050905080915050611ac7565b611ac4848484611eff565b90505b9392505050565b6000838311158290611b7b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611b40578082015181840152602081019050611b25565b50505050905090810190601f168015611b6d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611c16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180612225602c913960400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610611c50578284611c53565b83835b8092508193505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ce1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806121cf6025913960400191505060405180910390fd5b9250929050565b6000848484604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b815260140192505050604051602081830303815290604052805190602001208360405160200180807fff000000000000000000000000000000000000000000000000000000000000008152506001018473ffffffffffffffffffffffffffffffffffffffff1660601b815260140183815260200182815260200193505050506040516020818303038152906040528051906020012060001c9050949350505050565b6000808411611e29576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806122d56034913960400191505060405180910390fd5b600083118015611e395750600082115b611e8e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806121f46031913960400191505060405180910390fd5b6000611ea56103e58661209490919063ffffffff16565b90506000611ebc848361209490919063ffffffff16565b90506000611ee783611ed96103e88961209490919063ffffffff16565b61211a90919063ffffffff16565b9050808281611ef257fe5b0493505050509392505050565b60008060608573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8686604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310611fe25780518252602082019150602081019050602083039250611fbf565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612044576040519150601f19603f3d011682016040523d82523d6000602084013e612049565b606091505b50915091508180156120895750600081511480612088575080806020019051602081101561207657600080fd5b81019080805190602001909291905050505b5b925050509392505050565b6000808314156120a75760009050612114565b60008284029050828482816120b857fe5b041461210f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806122516021913960400191505060405180910390fd5b809150505b92915050565b600080828401905083811015612198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fe556e6973776170563248616e646c657223726563656976653a204e4f5f53454e445f4554485f504c45415345556e69737761705574696c7323736f7274546f6b656e733a205a45524f5f41444452455353556e69737761705574696c7323676574416d6f756e744f75743a20494e53554646494349454e545f4c4951554944495459556e69737761705574696c7323736f7274546f6b656e733a204944454e544943414c5f414444524553534553536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77556e6973776170563248616e646c6572235f737761703a204552524f525f53454e44494e475f544f4b454e53556e6973776170563248616e646c65722368616e646c653a205452414e534645525f4554485f544f5f52454c415945525f4641494c4544556e69737761705574696c7323676574416d6f756e744f75743a20494e53554646494349454e545f494e5055545f414d4f554e54a2646970667358221220fb71eb1386af4da197c2b8ad8d7686521fdadd52484991ac4b06b08418b90a7d64736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "canHandle(address,address,uint256,uint256,bytes)": {
        "params": {
          "_data": "- Bytes of arbitrary data",
          "_inputAmount": "- uint256 of the input token amount",
          "_inputToken": "- Address of the input token",
          "_minReturn": "- uint256 of the min return amount of output token",
          "_outputToken": "- Address of the output token"
        },
        "returns": {
          "_0": "bool - Whether the execution can be handled or not"
        }
      },
      "constructor": {
        "params": {
          "_codeHash": "- Bytes32 of the uniswap v2 pair contract unit code hash",
          "_factory": "- Address of the uniswap v2 factory contract",
          "_weth": "- Address of WETH contract"
        }
      },
      "handle(address,address,uint256,uint256,bytes)": {
        "params": {
          "_data": "- Bytes of arbitrary data",
          "_inputToken": "- Address of the input token",
          "_outputToken": "- Address of the output token"
        },
        "returns": {
          "bought": "- Amount of output token bought"
        }
      },
      "simulate(address,address,uint256,uint256,bytes)": {
        "params": {
          "_data": "- Bytes of arbitrary data",
          "_inputAmount": "- uint256 of the input token amount",
          "_inputToken": "- Address of the input token",
          "_minReturn": "- uint256 of the min return amount of output token",
          "_outputToken": "- Address of the output token"
        },
        "returns": {
          "_0": "bool - Whether the execution can be handled or not",
          "_1": "uint256 - Amount of output token bought"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canHandle(address,address,uint256,uint256,bytes)": {
        "notice": "Check whether can handle an order execution"
      },
      "constructor": "Creates the handler",
      "handle(address,address,uint256,uint256,bytes)": {
        "notice": "Handle an order execution"
      },
      "simulate(address,address,uint256,uint256,bytes)": {
        "notice": "Simulate an order execution"
      }
    },
    "notice": "UniswapV2 Handler used to execute an order",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}