{
  "language": "Solidity",
  "sources": {
    "contracts/Handler.sol": {
      "content": "/**\n *Submitted for verification at polygonscan.com on 2021-06-17\n */\n\n/**\n *Submitted for verification at FtmScan.com on 2021-05-26\n */\n\n// SPDX-License-Identifier: GPL-3.0\n\n/**\n *Submitted for verification at Etherscan.io on 2020-08-30\n */\n\n// File: contracts/interfaces/IERC20.sol\n\npragma solidity 0.6.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n// File: contracts/interfaces/IWETH.sol\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n\n// File: contracts/interfaces/IHandler.sol\n\ninterface IHandler {\n    /// @notice receive ETH\n    receive() external payable;\n\n    /**\n     * @notice Handle an order execution\n     * @param _inputToken - Address of the input token\n     * @param _outputToken - Address of the output token\n     * @param _inputAmount - uint256 of the input token amount\n     * @param _minReturn - uint256 of the min return amount of output token\n     * @param _data - Bytes of arbitrary data\n     * @return bought - Amount of output token bought\n     */\n    function handle(\n        IERC20 _inputToken,\n        IERC20 _outputToken,\n        uint256 _inputAmount,\n        uint256 _minReturn,\n        bytes calldata _data\n    ) external payable returns (uint256 bought);\n\n    /**\n     * @notice Check whether can handle an order execution\n     * @param _inputToken - Address of the input token\n     * @param _outputToken - Address of the output token\n     * @param _inputAmount - uint256 of the input token amount\n     * @param _minReturn - uint256 of the min return amount of output token\n     * @param _data - Bytes of arbitrary data\n     * @return bool - Whether the execution can be handled or not\n     */\n    function canHandle(\n        IERC20 _inputToken,\n        IERC20 _outputToken,\n        uint256 _inputAmount,\n        uint256 _minReturn,\n        bytes calldata _data\n    ) external view returns (bool);\n\n    function canHandleStoploss(\n        IERC20 _inputToken,\n        IERC20 _outputToken,\n        uint256 _inputAmount,\n        uint256 _stoploss,\n        uint256 _slppage,\n        bytes calldata _data\n    ) external view returns (bool);\n}\n\n// File: contracts/interfaces/uniswapV2/IUniswapV2Pair.sol\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// File: contracts/libs/SafeMath.sol\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: contracts/libs/UniswapUtils.sol\n\nlibrary UniswapUtils {\n    using SafeMath for uint256;\n\n    /**\n     * @notice Returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n     * @return uint32 - block timestamp\n     */\n    function currentBlockTimestamp() internal view returns (uint32) {\n        return uint32(block.timestamp % 2**32);\n    }\n\n    /**\n     * @notice Returns sorted token addresses, used to handle return values from pairs sorted in this order\n     * @param _tokenA - Address of the token A\n     * @param _tokenB - Address of the token B\n     * @return token0 - Address of the lower token\n     * @return token1 - Address of the higher token\n     */\n    function sortTokens(address _tokenA, address _tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(\n            _tokenA != _tokenB,\n            \"UniswapUtils#sortTokens: IDENTICAL_ADDRESSES\"\n        );\n        (token0, token1) = _tokenA < _tokenB\n            ? (_tokenA, _tokenB)\n            : (_tokenB, _tokenA);\n        require(token0 != address(0), \"UniswapUtils#sortTokens: ZERO_ADDRESS\");\n    }\n\n    /**\n     * @notice Calculates the CREATE2 address for a pair without making any external calls\n     * @param _factory - Address of the uniswapV2 factory contract\n     * @param _tokenA - Address of the token A\n     * @param _tokenB - Address of the token B\n     * @param _initCodeHash - Bytes32 of the uniswap v2 pair contract unit code hash\n     * @return pair - Address of the pair\n     */\n    function pairFor(\n        address _factory,\n        address _tokenA,\n        address _tokenB,\n        bytes32 _initCodeHash\n    ) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(_tokenA, _tokenB);\n        pair = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex\"ff\",\n                        _factory,\n                        keccak256(abi.encodePacked(token0, token1)),\n                        _initCodeHash // init code hash\n                    )\n                )\n            )\n        );\n    }\n\n    /**\n     * @notice Calculates the CREATE2 address for a pair without making any external calls\n     * @dev Tokens should be in order\n     * @param _factory - Address of the uniswapV2 factory contract\n     * @param _token0 - Address of the token 0\n     * @param _token1 - Address of the token 1\n     * @param _initCodeHash - Bytes32 of the uniswap v2 pair contract unit code hash\n     * @return pair - Address of the pair\n     */\n    function pairForSorted(\n        address _factory,\n        address _token0,\n        address _token1,\n        bytes32 _initCodeHash\n    ) internal pure returns (address pair) {\n        pair = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex\"ff\",\n                        _factory,\n                        keccak256(abi.encodePacked(_token0, _token1)),\n                        _initCodeHash // init code hash\n                    )\n                )\n            )\n        );\n    }\n\n    /**\n     * @notice Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n     * @param _amountIn - uint of the input token's amount\n     * @param _reserveIn - uint of the input token's reserve\n     * @param _reserveOut - uint of the output token's reserve\n     * @return amountOut - Maximum output amount\n     */\n    function getAmountOut(\n        uint256 _amountIn,\n        uint256 _reserveIn,\n        uint256 _reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(\n            _amountIn > 0,\n            \"UniswapUtils#getAmountOut: INSUFFICIENT_INPUT_AMOUNT\"\n        );\n        require(\n            _reserveIn > 0 && _reserveOut > 0,\n            \"UniswapUtils#getAmountOut: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 amountInWithFee = _amountIn.mul(997);\n        uint256 numerator = amountInWithFee.mul(_reserveOut);\n        uint256 denominator = _reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n}\n\n// File: contracts/libs/SafeERC20.sol\n\nlibrary SafeERC20 {\n    function transfer(\n        IERC20 _token,\n        address _to,\n        uint256 _val\n    ) internal returns (bool) {\n        (bool success, bytes memory data) = address(_token).call(\n            abi.encodeWithSelector(_token.transfer.selector, _to, _val)\n        );\n        return success && (data.length == 0 || abi.decode(data, (bool)));\n    }\n}\n\n// File: contracts/libs/PineUtils.sol\n\nlibrary PineUtils {\n    address internal constant ETH_ADDRESS =\n        address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n\n    /**\n     * @notice Get the account's balance of token or ETH\n     * @param _token - Address of the token\n     * @param _addr - Address of the account\n     * @return uint256 - Account's balance of token or ETH\n     */\n    function balanceOf(IERC20 _token, address _addr)\n        internal\n        view\n        returns (uint256)\n    {\n        if (ETH_ADDRESS == address(_token)) {\n            return _addr.balance;\n        }\n\n        return _token.balanceOf(_addr);\n    }\n\n    /**\n     * @notice Transfer token or ETH to a destinatary\n     * @param _token - Address of the token\n     * @param _to - Address of the recipient\n     * @param _val - Uint256 of the amount to transfer\n     * @return bool - Whether the transfer was success or not\n     */\n    function transfer(\n        IERC20 _token,\n        address _to,\n        uint256 _val\n    ) internal returns (bool) {\n        if (ETH_ADDRESS == address(_token)) {\n            (bool success, ) = _to.call{value: _val}(\"\");\n            return success;\n        }\n\n        return SafeERC20.transfer(_token, _to, _val);\n    }\n}\n\n// File: contracts/handlers/UniswapV2Handler.sol\n\n/// @notice UniswapV2 Handler used to execute an order\ncontract UniswapV2Handler is IHandler {\n    using SafeMath for uint256;\n\n    IWETH public immutable WETH;\n    address public immutable FACTORY;\n    bytes32 public immutable FACTORY_CODE_HASH;\n\n    /**\n     * @notice Creates the handler\n     * @param _factory - Address of the uniswap v2 factory contract\n     * @param _weth - Address of WETH contract\n     * @param _codeHash - Bytes32 of the uniswap v2 pair contract unit code hash\n     */\n    constructor(\n        address _factory,\n        IWETH _weth,\n        bytes32 _codeHash\n    ) public {\n        FACTORY = _factory;\n        WETH = _weth;\n        FACTORY_CODE_HASH = _codeHash;\n    }\n\n    /// @notice receive ETH\n    receive() external payable override {\n        require(\n            msg.sender != tx.origin,\n            \"UniswapV2Handler#receive: NO_SEND_ETH_PLEASE\"\n        );\n    }\n\n    /**\n     * @notice Handle an order execution\n     * @param _inputToken - Address of the input token\n     * @param _outputToken - Address of the output token\n     * @param _data - Bytes of arbitrary data\n     * @return bought - Amount of output token bought\n     */\n    function handle(\n        IERC20 _inputToken,\n        IERC20 _outputToken,\n        uint256,\n        uint256,\n        bytes calldata _data\n    ) external payable override returns (uint256 bought) {\n        // Load real initial balance, don't trust provided value\n        uint256 amount = PineUtils.balanceOf(_inputToken, address(this));\n        address inputToken = address(_inputToken);\n        address outputToken = address(_outputToken);\n        address weth = address(WETH);\n\n        // Decode extra data\n        (, address relayer, uint256 fee) = abi.decode(\n            _data,\n            (address, address, uint256)\n        );\n\n        if (inputToken == weth || inputToken == PineUtils.ETH_ADDRESS) {\n            // Swap WETH -> outputToken\n            amount = amount.sub(fee);\n\n            // Convert from ETH to WETH if necessary\n            if (inputToken == PineUtils.ETH_ADDRESS) {\n                WETH.deposit{value: amount}();\n                inputToken = weth;\n            } else {\n                WETH.withdraw(fee);\n            }\n\n            // Trade\n            bought = _swap(inputToken, outputToken, amount, msg.sender);\n        } else if (\n            outputToken == weth || outputToken == PineUtils.ETH_ADDRESS\n        ) {\n            // Swap inputToken -> WETH\n            bought = _swap(inputToken, weth, amount, address(this));\n\n            // Convert from WETH to ETH if necessary\n            if (outputToken == PineUtils.ETH_ADDRESS) {\n                WETH.withdraw(bought);\n            } else {\n                WETH.withdraw(fee);\n            }\n\n            // Transfer amount to sender\n            bought = bought.sub(fee);\n            PineUtils.transfer(IERC20(outputToken), msg.sender, bought);\n        } else {\n            // Swap inputToken -> WETH -> outputToken\n            //  - inputToken -> WETH\n            bought = _swap(inputToken, weth, amount, address(this));\n\n            // Withdraw fee\n            WETH.withdraw(fee);\n\n            // - WETH -> outputToken\n            bought = _swap(weth, outputToken, bought.sub(fee), msg.sender);\n        }\n\n        // Send fee to relayer\n        (bool successRelayer, ) = relayer.call{value: fee}(\"\");\n        require(\n            successRelayer,\n            \"UniswapV2Handler#handle: TRANSFER_ETH_TO_RELAYER_FAILED\"\n        );\n    }\n\n    /**\n     * @notice Check whether can handle an order execution\n     * @param _inputToken - Address of the input token\n     * @param _outputToken - Address of the output token\n     * @param _inputAmount - uint256 of the input token amount\n     * @param _minReturn - uint256 of the min return amount of output token\n     * @param _data - Bytes of arbitrary data\n     * @return bool - Whether the execution can be handled or not\n     */\n    function canHandle(\n        IERC20 _inputToken,\n        IERC20 _outputToken,\n        uint256 _inputAmount,\n        uint256 _minReturn,\n        bytes calldata _data\n    ) external view override returns (bool) {\n        address inputToken = address(_inputToken);\n        address outputToken = address(_outputToken);\n        address weth = address(WETH);\n\n        // Decode extra data\n        (, , uint256 fee) = abi.decode(_data, (address, address, uint256));\n\n        if (inputToken == weth || inputToken == PineUtils.ETH_ADDRESS) {\n            if (_inputAmount <= fee) {\n                return false;\n            }\n\n            return\n                _estimate(weth, outputToken, _inputAmount.sub(fee)) >=\n                _minReturn;\n        } else if (\n            outputToken == weth || outputToken == PineUtils.ETH_ADDRESS\n        ) {\n            uint256 bought = _estimate(inputToken, weth, _inputAmount);\n\n            if (bought <= fee) {\n                return false;\n            }\n\n            return bought.sub(fee) >= _minReturn;\n        } else {\n            uint256 bought = _estimate(inputToken, weth, _inputAmount);\n            if (bought <= fee) {\n                return false;\n            }\n\n            return _estimate(weth, outputToken, bought.sub(fee)) >= _minReturn;\n        }\n    }\n\n    function canHandleStoploss(\n        IERC20 _inputToken,\n        IERC20 _outputToken,\n        uint256 _inputAmount,\n        uint256 _stoploss,\n        uint256 _slippage,\n        bytes calldata _data\n    ) external view override returns (bool) {\n        address inputToken = address(_inputToken);\n        address outputToken = address(_outputToken);\n        address weth = address(WETH);\n\n        // Decode extra data\n        (, , uint256 fee) = abi.decode(_data, (address, address, uint256));\n\n        if (inputToken == weth || inputToken == PineUtils.ETH_ADDRESS) {\n            if (_inputAmount <= fee) {\n                return false;\n            }\n            uint256 savedFunds = _estimate(\n                weth,\n                outputToken,\n                _inputAmount.sub(fee)\n            );\n            return savedFunds <= _stoploss && savedFunds >= _slippage;\n        } else if (\n            outputToken == weth || outputToken == PineUtils.ETH_ADDRESS\n        ) {\n            uint256 savedFunds = _estimate(inputToken, weth, _inputAmount);\n\n            if (savedFunds <= fee) {\n                return false;\n            }\n\n            return savedFunds.sub(fee) <= _stoploss && savedFunds >= _slippage;\n        } else {\n            uint256 savedFunds = _estimate(inputToken, weth, _inputAmount);\n            if (savedFunds <= fee) {\n                return false;\n            }\n\n            return\n                _estimate(weth, outputToken, savedFunds.sub(fee)) <=\n                _stoploss &&\n                savedFunds >= _slippage;\n        }\n    }\n\n    /**\n     * @notice Simulate an order execution\n     * @param _inputToken - Address of the input token\n     * @param _outputToken - Address of the output token\n     * @param _inputAmount - uint256 of the input token amount\n     * @param _minReturn - uint256 of the min return amount of output token\n     * @param _data - Bytes of arbitrary data\n     * @return bool - Whether the execution can be handled or not\n     * @return uint256 - Amount of output token bought\n     */\n    function simulate(\n        IERC20 _inputToken,\n        IERC20 _outputToken,\n        uint256 _inputAmount,\n        uint256 _minReturn,\n        bytes calldata _data\n    ) external view returns (bool, uint256) {\n        address inputToken = address(_inputToken);\n        address outputToken = address(_outputToken);\n        address weth = address(WETH);\n\n        // Decode extra data\n        (, , uint256 fee) = abi.decode(_data, (address, address, uint256));\n\n        uint256 bought;\n\n        if (inputToken == weth || inputToken == PineUtils.ETH_ADDRESS) {\n            if (_inputAmount <= fee) {\n                return (false, 0);\n            }\n\n            bought = _estimate(weth, outputToken, _inputAmount.sub(fee));\n        } else if (\n            outputToken == weth || outputToken == PineUtils.ETH_ADDRESS\n        ) {\n            bought = _estimate(inputToken, weth, _inputAmount);\n            if (bought <= fee) {\n                return (false, 0);\n            }\n\n            bought = bought.sub(fee);\n        } else {\n            bought = _estimate(inputToken, weth, _inputAmount);\n            if (bought <= fee) {\n                return (false, 0);\n            }\n\n            bought = _estimate(weth, outputToken, bought.sub(fee));\n        }\n        return (bought >= _minReturn, bought);\n    }\n\n    /**\n     * @notice Estimate output token amount\n     * @param _inputToken - Address of the input token\n     * @param _outputToken - Address of the output token\n     * @param _inputAmount - uint256 of the input token amount\n     * @return bought - Amount of output token bought\n     */\n    function _estimate(\n        address _inputToken,\n        address _outputToken,\n        uint256 _inputAmount\n    ) internal view returns (uint256 bought) {\n        // Get uniswap trading pair\n        (address token0, address token1) = UniswapUtils.sortTokens(\n            _inputToken,\n            _outputToken\n        );\n        IUniswapV2Pair pair = IUniswapV2Pair(\n            UniswapUtils.pairForSorted(\n                FACTORY,\n                token0,\n                token1,\n                FACTORY_CODE_HASH\n            )\n        );\n\n        // Compute limit for uniswap trade\n        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\n\n        // Optimal amounts for uniswap trade\n        uint256 reserveIn;\n        uint256 reserveOut;\n        if (_inputToken == token0) {\n            reserveIn = reserve0;\n            reserveOut = reserve1;\n        } else {\n            reserveIn = reserve1;\n            reserveOut = reserve0;\n        }\n\n        bought = UniswapUtils.getAmountOut(_inputAmount, reserveIn, reserveOut);\n    }\n\n    /**\n     * @notice Swap input token to output token\n     * @param _inputToken - Address of the input token\n     * @param _outputToken - Address of the output token\n     * @param _inputAmount - uint256 of the input token amount\n     * @param _recipient - Address of the recipient\n     * @return bought - Amount of output token bought\n     */\n    function _swap(\n        address _inputToken,\n        address _outputToken,\n        uint256 _inputAmount,\n        address _recipient\n    ) internal returns (uint256 bought) {\n        // Get uniswap trading pair\n        (address token0, address token1) = UniswapUtils.sortTokens(\n            _inputToken,\n            _outputToken\n        );\n        IUniswapV2Pair pair = IUniswapV2Pair(\n            UniswapUtils.pairForSorted(\n                FACTORY,\n                token0,\n                token1,\n                FACTORY_CODE_HASH\n            )\n        );\n\n        // Send tokens to uniswap pair\n        require(\n            SafeERC20.transfer(\n                IERC20(_inputToken),\n                address(pair),\n                _inputAmount\n            ),\n            \"UniswapV2Handler#_swap: ERROR_SENDING_TOKENS\"\n        );\n\n        // Get current reserves\n        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\n\n        // Optimal amounts for uniswap trade\n        {\n            uint256 reserveIn;\n            uint256 reserveOut;\n            if (_inputToken == token0) {\n                reserveIn = reserve0;\n                reserveOut = reserve1;\n            } else {\n                reserveIn = reserve1;\n                reserveOut = reserve0;\n            }\n            bought = UniswapUtils.getAmountOut(\n                _inputAmount,\n                reserveIn,\n                reserveOut\n            );\n        }\n\n        // Determine if output amount is token1 or token0\n        uint256 amount1Out;\n        uint256 amount0Out;\n        if (_inputToken == token0) {\n            amount1Out = bought;\n        } else {\n            amount0Out = bought;\n        }\n\n        // Execute swap\n        pair.swap(amount0Out, amount1Out, _recipient, bytes(\"\"));\n    }\n}\n"
    },
    "contracts/mocks/UniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\n\npragma solidity 0.6.12;\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n\n// File: @uniswap/lib/contracts/libraries/TransferHelper.sol\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x095ea7b3, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: APPROVE_FAILED\"\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0xa9059cbb, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FAILED\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\n    }\n}\n\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// File: contracts/libraries/SafeMath.sol\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n}\n\n// File: contracts/libraries/UniswapV2Library.sol\n\ninterface Fac {\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n}\n\nlibrary UniswapV2Library {\n    using SafeMath for uint256;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = Fac(factory).getPair(token0, token1);\n        // pair = address(uint(keccak256(abi.encodePacked(\n        //         hex'ff',\n        //         factory,\n        //         keccak256(abi.encodePacked(token0, token1)),\n        //         hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n        //     ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\n            pairFor(factory, tokenA, tokenB)\n        ).getReserves();\n        (reserveA, reserveB) = tokenA == token0\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        require(amountA > 0, \"UniswapV2Library: INSUFFICIENT_AMOUNT\");\n        require(\n            reserveA > 0 && reserveB > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 amountInWithFee = amountIn.mul(997);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(\n        address factory,\n        uint256 amountIn,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i; i < path.length - 1; i++) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n                factory,\n                path[i],\n                path[i + 1]\n            );\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n                factory,\n                path[i - 1],\n                path[i]\n            );\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n\n// File: contracts/interfaces/IUniswapV2Router01.sol\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n// File: contracts/interfaces/IERC20.sol\n\ninterface IERC20 {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n}\n\n// File: contracts/interfaces/IWETH.sol\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n\n// File: contracts/UniswapV2Router01.sol\n\ncontract UniswapV2Router01 is IUniswapV2Router01 {\n    address public immutable override factory;\n    address public immutable override WETH;\n\n    modifier ensure(uint256 deadline) {\n        require(deadline >= block.timestamp, \"UniswapV2Router: EXPIRED\");\n        _;\n    }\n\n    constructor(address _factory, address _WETH) public {\n        factory = _factory;\n        WETH = _WETH;\n    }\n\n    receive() external payable {\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n    }\n\n    // **** ADD LIQUIDITY ****\n    function _addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin\n    ) private returns (uint256 amountA, uint256 amountB) {\n        // create the pair if it doesn't exist yet\n        if (IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) {\n            IUniswapV2Factory(factory).createPair(tokenA, tokenB);\n        }\n        (uint256 reserveA, uint256 reserveB) = UniswapV2Library.getReserves(\n            factory,\n            tokenA,\n            tokenB\n        );\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n        } else {\n            uint256 amountBOptimal = UniswapV2Library.quote(\n                amountADesired,\n                reserveA,\n                reserveB\n            );\n            if (amountBOptimal <= amountBDesired) {\n                require(\n                    amountBOptimal >= amountBMin,\n                    \"UniswapV2Router: INSUFFICIENT_B_AMOUNT\"\n                );\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n            } else {\n                uint256 amountAOptimal = UniswapV2Library.quote(\n                    amountBDesired,\n                    reserveB,\n                    reserveA\n                );\n                assert(amountAOptimal <= amountADesired);\n                require(\n                    amountAOptimal >= amountAMin,\n                    \"UniswapV2Router: INSUFFICIENT_A_AMOUNT\"\n                );\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n            }\n        }\n    }\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        override\n        ensure(deadline)\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        )\n    {\n        (amountA, amountB) = _addLiquidity(\n            tokenA,\n            tokenB,\n            amountADesired,\n            amountBDesired,\n            amountAMin,\n            amountBMin\n        );\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\n        liquidity = IUniswapV2Pair(pair).mint(to);\n    }\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        override\n        ensure(deadline)\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        )\n    {\n        (amountToken, amountETH) = _addLiquidity(\n            token,\n            WETH,\n            amountTokenDesired,\n            msg.value,\n            amountTokenMin,\n            amountETHMin\n        );\n        address pair = UniswapV2Library.pairFor(factory, token, WETH);\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n        IWETH(WETH).deposit{value: amountETH}();\n        assert(IWETH(WETH).transfer(pair, amountETH));\n        liquidity = IUniswapV2Pair(pair).mint(to);\n        if (msg.value > amountETH)\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH); // refund dust eth, if any\n    }\n\n    // **** REMOVE LIQUIDITY ****\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        public\n        override\n        ensure(deadline)\n        returns (uint256 amountA, uint256 amountB)\n    {\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n        IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n        (uint256 amount0, uint256 amount1) = IUniswapV2Pair(pair).burn(to);\n        (address token0, ) = UniswapV2Library.sortTokens(tokenA, tokenB);\n        (amountA, amountB) = tokenA == token0\n            ? (amount0, amount1)\n            : (amount1, amount0);\n        require(\n            amountA >= amountAMin,\n            \"UniswapV2Router: INSUFFICIENT_A_AMOUNT\"\n        );\n        require(\n            amountB >= amountBMin,\n            \"UniswapV2Router: INSUFFICIENT_B_AMOUNT\"\n        );\n    }\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        public\n        override\n        ensure(deadline)\n        returns (uint256 amountToken, uint256 amountETH)\n    {\n        (amountToken, amountETH) = removeLiquidity(\n            token,\n            WETH,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            address(this),\n            deadline\n        );\n        TransferHelper.safeTransfer(token, to, amountToken);\n        IWETH(WETH).withdraw(amountETH);\n        TransferHelper.safeTransferETH(to, amountETH);\n    }\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override returns (uint256 amountA, uint256 amountB) {\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n        uint256 value = approveMax ? uint256(-1) : liquidity;\n        IUniswapV2Pair(pair).permit(\n            msg.sender,\n            address(this),\n            value,\n            deadline,\n            v,\n            r,\n            s\n        );\n        (amountA, amountB) = removeLiquidity(\n            tokenA,\n            tokenB,\n            liquidity,\n            amountAMin,\n            amountBMin,\n            to,\n            deadline\n        );\n    }\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override returns (uint256 amountToken, uint256 amountETH) {\n        address pair = UniswapV2Library.pairFor(factory, token, WETH);\n        uint256 value = approveMax ? uint256(-1) : liquidity;\n        IUniswapV2Pair(pair).permit(\n            msg.sender,\n            address(this),\n            value,\n            deadline,\n            v,\n            r,\n            s\n        );\n        (amountToken, amountETH) = removeLiquidityETH(\n            token,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            to,\n            deadline\n        );\n    }\n\n    // **** SWAP ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swap(\n        uint256[] memory amounts,\n        address[] memory path,\n        address _to\n    ) private {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\n            uint256 amountOut = amounts[i + 1];\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\n                ? (uint256(0), amountOut)\n                : (amountOut, uint256(0));\n            address to = i < path.length - 2\n                ? UniswapV2Library.pairFor(factory, output, path[i + 2])\n                : _to;\n            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output))\n                .swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            UniswapV2Library.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n        require(\n            amounts[0] <= amountInMax,\n            \"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\"\n        );\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            UniswapV2Library.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        override\n        ensure(deadline)\n        returns (uint256[] memory amounts)\n    {\n        require(path[0] == WETH, \"UniswapV2Router: INVALID_PATH\");\n        amounts = UniswapV2Library.getAmountsOut(factory, msg.value, path);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(\n            IWETH(WETH).transfer(\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\n                amounts[0]\n            )\n        );\n        _swap(amounts, path, to);\n    }\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\n        require(path[path.length - 1] == WETH, \"UniswapV2Router: INVALID_PATH\");\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n        require(\n            amounts[0] <= amountInMax,\n            \"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\"\n        );\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            UniswapV2Library.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\n        require(path[path.length - 1] == WETH, \"UniswapV2Router: INVALID_PATH\");\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            UniswapV2Library.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        override\n        ensure(deadline)\n        returns (uint256[] memory amounts)\n    {\n        require(path[0] == WETH, \"UniswapV2Router: INVALID_PATH\");\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n        require(\n            amounts[0] <= msg.value,\n            \"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\"\n        );\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(\n            IWETH(WETH).transfer(\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\n                amounts[0]\n            )\n        );\n        _swap(amounts, path, to);\n        if (msg.value > amounts[0])\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]); // refund dust eth, if any\n    }\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) public pure override returns (uint256 amountB) {\n        return UniswapV2Library.quote(amountA, reserveA, reserveB);\n    }\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) public pure override returns (uint256 amountOut) {\n        return UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) public pure override returns (uint256 amountIn) {\n        return UniswapV2Library.getAmountOut(amountOut, reserveIn, reserveOut);\n    }\n\n    function getAmountsOut(uint256 amountIn, address[] memory path)\n        public\n        view\n        override\n        returns (uint256[] memory amounts)\n    {\n        return UniswapV2Library.getAmountsOut(factory, amountIn, path);\n    }\n\n    function getAmountsIn(uint256 amountOut, address[] memory path)\n        public\n        view\n        override\n        returns (uint256[] memory amounts)\n    {\n        return UniswapV2Library.getAmountsIn(factory, amountOut, path);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}